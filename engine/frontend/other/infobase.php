<div class="card">
	<div class="card-body">
		<p><strong>Lusy.io</strong> - это система постановки задач и контроля их выполнения. Данный продукт разрабатывается для предпринимателя, который хочет наладить порядок в своей небольшой компании от 3 до 15 человек. Скорее всего, это будет его первый опыт взаимодействия с CRM-системами. </p>
		<p>Предпринимателю необходимо:</p>
		<ul>
		<li>Иметь возможность находу поставить задачу сотруднику</li>
		<li>Иметь представление о том, чем занимаются его сотрудники</li>
		<li>Иметь наглядные показатели эффективности сотрудников</li>
		<li>Иметь систему мотивации в виде бальной системы</li>
		</ul>
		<p>Если начинающий предприниматель имеет технический склад ума, хочет чувствовать контроль над всеми, желает освободиться от постоянных рутинных переписок по почте и в мессенджерах, но пока не имеет возможности или необходимости стать клиентом больших игроков (1с Битрикс, МегаПлан и тд), то мы можем ему помочь своим продуктом. </p>
		<p>Система управления Lusy - это начало для организации порядка и контроля в организации.</p>
		<hr>
		<p><strong>Разделы базы знаний:</strong></p>
		<ol>
			<li><a href="#datebase">База данных</a></li>
			<li><a href="#files">Файловая структура</a></li>
		</ol>
	</div>
</div>
<a name="datebase"></a>
<div class="card mt-3">
	<div class="card-header"><h4 class="mb-0">База данных</h4></div>
	<div class="card-body">
		<p><strong>База данных </strong>- ядро нашей системы. В ней хранятся все данные системы. Наша общая задача - сократить количество запросов, при сохранении функциональности. </p>
		<p>База данных состоит из следующих таблиц:</p>
		<p><em>company</em> - в этой таблице хранятся данные об организации (предпочитаемый язык, сайт, дата регистрации, бесплатный или платный аккаунт и т.д.). ID компании связывается всех пользователей этой компании и помогает разграничить поток из задач, комментариев и событий.</p>
		<p><em>users</em> - в этой таблице хранятся данные о пользователях. Здесь находятся следующие значения: ID пользователя, ID его компании, имя, фамилия, логин, почта, пароль (соленый и зашифрованный в md5), его роль в компании, количество баллов и т.д. </p>
		<p><em>tasks</em> - в этой таблице мы храним информацию о задач. Каждая задача имеет множество значений, н-р: ID задачи, имя, описание, дата создания, дедлайн, статус, постановщик, ответственный и т.д. </p>
		<p><em>comments</em> - это таблица комментариев. Здесь собраны следующие поля: ID комментария, сам комментарий, ID задачи (где был оставлен комментарий), ID пользователя и дата создания.</p>
		<p><em>log</em> - это таблица событий. Для введения бальной системы поощрения и записи всех действий сотрудников, мы ведем эту таблицу со следующими полями: действие, ID задачи, ID пользователя и время совершения события.</p>
	</div>
</div>
<a name="files"></a>
<div class="card mt-3">
	<div class="card-header"><h4 class="mb-0">Файловая структура</h4></div>
	<div class="card-body">
		<p><strong>Файловая система</strong> нашего проекта имеет следующие ключевые особенности:</p>
		<ul>
		<li>страницы генерируются по правилам указанным в файле .htaccess и небольшом коде в index.php</li>
		<li>подключение к базе данных, функции подключения к базе данных указаны в файле conf.php (находится в корневом каталоге)</li>
		<li>все модули системы (н-р: страница задач, список задач, страница профиля и т.д.) разделены на две части: frontend и backend. Это разделение происходит в папке /engine/, внутри которой есть две основные папки /engine/frontend/ и /engine/backend/. Каждый модуль состоит из двух одинаковых по имени файлов, один из которых (отвечающих на формирование переменных, получения значений из базы данных и тд) расположен в папке backend, а второй файла (отвечающий за интерфейс) расположен в папке frontend.</li>
		</ul>
		<p>Пример разделения модулей на 2 части backend&rsquo;а и frontend&rsquo;а:</p>
		<p>Наша задача добавить на страницу профиля отображение даты, когда пользователь был зарегистрирован в системе. Для этого мы делаем следующее:</p>
		<ol>
		<li>Заходим в файл /engine/backend/other/profile.php и добавляем php-код запроса к базе данных в таблицу users. Кладем полученный ответ в переменную $datereg</li>
		<li>Заходим в файл /engine/frontend/other/profile.php и добавляем html-код верстки, как мы хотим отобразить эту дату и вписываем туда переменную из backend&rsquo;a. Получается строка типа &lt;p&gt;&lt;?=$datereg=?&gt;&lt;/p&gt;</li>
		</ol>
		<p>Плюс к этому есть папки:</p>
		<p>/assets/ - папка с js и css</p>
		<p>/upload/ - папка с пользовательскими загрузками (аватарки, файлы и тд)</p>
		<p>/cron/ - папка с файлами для планировщика заданий</p>
		<p>Также существует файл-посредник между php и js. Он назван ajax.php и расположен в корневом каталоге. В него посредством js и post-запроса отправляется данные о том, какой модуль php-файл нужно подключить. Сами же файлы обработчики лежат в /engine/ajax/.</p>
	</div>
</div>
